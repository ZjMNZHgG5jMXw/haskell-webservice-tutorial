---------------------------------------------------------------------------
Haskell webservice tutorial
---------------------------------------------------------------------------

Step 1
SETUP

1. Install stack, see

    http://stackage.org/

2. Create a new instance of the servant template

    $ stack new haskell-webservice-tutorial servant

3. Look through stack.yaml, haskell-webservice-tutorial.cabal

4. Setup compiler tool chain

    $ stack setup

4. Compile and install

    $ stack install

5. Run and check
    
    $ $HOME/.local/bin/haskell-webservice-tutorial-exe
    $ curl http://localhost:8080/users

6. Compare the output to Dürrenmatt's "The Physicists"

---------------------------------------------------------------------------

Step 2
ADD A NEW ENDPOINT

1. Open

    src/Lib.hs

2. Add an endpoint for the version to the `API' type

3. Add the endpoint handler to the `server' function

4. Run the service from the REPL

    $ stack repl
    λ :main

5. Check new endpoint

    $ curl http://localhost:8080/version

---------------------------------------------------------------------------

Step 3
ADD A LOGGING MIDDLEWARE

1. Add `wai-extra' to the build dependencies in the cabal file

2. Restart the REPL to load the new dependencies

3. Add the logger middleware to the `startApp' function
   The middleware accepts the argument `app' and extends it by logging

---------------------------------------------------------------------------

Step 4
ADD QUERY PARAMETERS

1. Add a new GET endpoint with QueryParam to capture query parameters

2. The query parameters will be parsed to the correct type by servant

3. The handler accepts query parameters as `Maybe <type>'

---------------------------------------------------------------------------

Step 5
ADD REST RESOURCES

1. Add a new GET endpoint with Capture to capture the REST variables

2. The variables will be parsed to the correct type by servant

3. The handler accepts REST variables as `<type>' without `Maybe'

4. Check output and log for passing strings instead of integers

5. Do the same for the query variables of Step 4

6. Create the packages' documentation

    $ stack haddock

7. Check the documentation

    .stack-work/install/x86_64-linux/lts-6.7/7.10.3/doc/all/index.html

8. Search and open the documentation for `Servant.API'
   See that there're many more combinators, HTTP verbs, etc. to discover
   Hint: The payload of PUT/PUSH request is parsed automatically from JSON
   to data structures or a 400 Bad Request is returned, if parsing fails

---------------------------------------------------------------------------
